use std::io::BufRead;
use std::io;

fn round(layout: &mut [usize], crab_idx: usize) {
    let crab = crab_idx + 1;

    let next_idx = layout[crab_idx];
    let next = next_idx + 1;

    let plus1_idx = layout[next_idx];
    let plus1 = plus1_idx + 1;

    let plus2_idx = layout[plus1_idx];
    let plus2 = plus2_idx + 1;

    let mut destination = crab_idx;
    while destination == next || destination == plus1 || destination == plus2 {
        destination = ((destination - 1) % layout.len()) + 1;
    }

    println!("Crab is {}. Next are {}, {}, {}. Destination is {}.", crab, next, plus1, plus2, destination);
}

fn part1(layout: &mut [usize], start: usize) -> i64 {
    round(layout, start);
    0
}

fn part2(layout: &mut [usize]) -> i64 {
    round(layout, 1);
    0
}

fn main() -> io::Result<()> {
    let stdin = io::stdin();
    let reader = stdin.lock();

    let input: Vec<u32> = reader.lines()
        .map(|line| line.expect("Couldn't read stdin"))
        .map(|line| line.chars().map(|c| c.to_digit(10).unwrap()).collect())
        .next()
        .unwrap();

    let mut layout = [0usize; 9];
    for crab_idx in 0..input.len() {
        let this_crab = input[crab_idx] as usize;
        let next_crab_idx = (crab_idx + 1) % input.len();
        let next_crab = input[next_crab_idx] as usize;
    
        layout[this_crab - 1] = next_crab - 1;
    }

	let answer1 = part1(&mut layout, (input[0] - 1) as usize);

    let mut layout = [0usize; 1000000];
	let answer2 = part2(&mut layout);

	println!("Answer 1: {}", answer1);
	println!("Answer 2: {}", answer2);

    Ok(())
}
